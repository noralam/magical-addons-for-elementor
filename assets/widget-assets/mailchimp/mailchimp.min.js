(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerWidget = void 0;

var registerWidget = function registerWidget(className, widgetName) {
  var skin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

  if (!(className || widgetName)) {
    return;
  }
  /**
   * Because Elementor plugin uses jQuery custom event,
   * We also have to use jQuery to use this event
   */



  jQuery(window).on('elementor/frontend/init', function () {
    var addHandler = function addHandler($element) {
      elementorFrontend.elementsHandler.addHandler(className, {
        $element: $element
      });
    };
    elementorFrontend.hooks.addAction(
      "frontend/element_ready/mg-mailchimp.default",
      addHandler
    );
  
  });
};

exports.registerWidget = registerWidget;

},{}],2:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fadeOut = exports.fadeIn = void 0;

var _utils = require("../lib/utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var fadeIn = function fadeIn(element) {
  var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "normal";
  var display = arguments.length > 2 ? arguments[2] : undefined;
  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  element.style.opacity = 0;
  element.style.display = display || "block";

  var fade = function fade() {
    var opacity = parseFloat(element.style.opacity);

    if ((opacity += speed === "fast" ? 0.2 : 0.1) <= 1) {
      element.style.opacity = opacity;

      if (opacity === 1 && callback) {
        callback();
      }

      window.requestAnimationFrame(fade);
    }
  };

  window.requestAnimationFrame(fade);
};

exports.fadeIn = fadeIn;

var fadeOut = function fadeOut(element) {
  var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "normal";
  var display = arguments.length > 2 ? arguments[2] : undefined;
  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  element.style.opacity = 1;
  element.style.display = display || "block";

  var fade = function fade() {
    var opacity = parseFloat(element.style.opacity);

    if ((opacity -= speed === "fast" ? 0.2 : 0.1) < 0) {
      element.style.display = "none";
    } else {
      element.style.opacity = opacity;

      if (opacity === 0 && callback) {
        callback();
      }

      window.requestAnimationFrame(fade);
    }
  };

  window.requestAnimationFrame(fade);
};

exports.fadeOut = fadeOut;

var Mg_Mailchimp = /*#__PURE__*/function (_elementorModules$fro) {
  _inherits(Mg_Mailchimp, _elementorModules$fro);

  var _super = _createSuper(Mg_Mailchimp);

  function Mg_Mailchimp() {
    _classCallCheck(this, Mg_Mailchimp);

    return _super.apply(this, arguments);
  }

  _createClass(Mg_Mailchimp, [{
    key: "getDefaultSettings",
    value: function getDefaultSettings() {
      return {
        selectors: {
          mcForm: '.mg-mc-form'
        }
      };
    }
  }, {
    key: "getDefaultElements",
    value: function getDefaultElements() {
      var element = this.$element.get(0);
      var selectors = this.getSettings("selectors");
      return {
        mcForm: element.querySelectorAll(selectors.mcForm)
      };
    }
  }, {
    key: "onInit",
    value: function onInit() {
      var _get2;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_get2 = _get(_getPrototypeOf(Mg_Mailchimp.prototype), "onInit", this)).call.apply(_get2, [this].concat(args));

      this.setupEventListeners();
    }
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      var mcForms = this.elements.mcForm;
      mcForms.forEach(function (form) {
        var apiKey = form.parentNode.getAttribute('data-api-key'),
            listID = form.parentNode.getAttribute('data-list-id'),
            buttonText = form.parentNode.getAttribute('data-button-text'),
            successText = form.parentNode.getAttribute('data-success-text'),
            loadingText = form.parentNode.getAttribute('data-loading-text');
        form.addEventListener('submit', function (event) {
          event.preventDefault();
var fname,
fnamElement = form.querySelector('.mg-mc-input-fn');
if (fnamElement != null) {
    fname = fnamElement.value.trim;
}
else {
    fname = document.getElementById("hfname").value;
}
var lname,
lnamElement = form.querySelector('.mg-mc-input-ln');
if (lnamElement != null) {
    lname = lnamElement.value.trim;
}
else {
    lname = document.getElementById("lname").value;
}

          var btn = form.querySelector('.mg-mc-subscribe'),
              btnText = form.querySelector('.mg-mc-subscribe span'),
              firstName = fname,
              lastName = lname,
              emailAdress = form.querySelector('.mg-mc-input-email').value.trim(),
              msg = form.querySelector('.mg-mc-message');
          btn.classList.add('mc-btn-loading');
          btnText.innerHTML = loadingText;
          var formData = new FormData();
          formData.append("action", "mg_mc_form");
          formData.append("nonce", localize.nonce);
          formData.append("apiKey", apiKey);
          formData.append("listId", listID);
          formData.append("firstname", firstName);
          formData.append("lastname", lastName);
          formData.append("email", emailAdress);
          var params = new URLSearchParams(formData);
          fetch(localize.ajax_url, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Cache-Control': 'no-cache'
            },
            body: params
          }).then(function (response) {
            return response.json();
          }).then(function (response) {
            if (response.status == 'subscribed') {
              event.target.reset();
              msg.classList.add('mg-mc-success-text');
              msg.style.display = 'block';
              msg.innerHTML = '<p>' + successText + '</p>';
            } else {
              msg.classList.add('mg-mc-error-text');
              msg.style.display = 'block';
              msg.innerHTML = '<p>' + response.status + '</p>';
            }

            btn.classList.remove('mc-btn-loading');
            btnText.innerHTML = buttonText;
          }).catch(function (err) {
            msg.classList.add('mg-mc-error-text');
            msg.style.display = 'block';
            msg.innerHTML = '<p>' + err.status + '</p>';
            btn.classList.remove('mc-btn-loading');
            btnText.innerHTML = buttonText;
          });
        });
      });
    }
  }]);

  return Mg_Mailchimp;
}(elementorModules.frontend.handlers.Base);

(0, _utils.registerWidget)(Mg_Mailchimp, "mg-mailchimp");

},{"../lib/utils":1}]},{},[2])
